{"version":3,"sources":["store/actions/unit.actions.ts","components/Header.tsx","store/actions/city.actions.ts","consts.ts","store/reducers/favorite.reducer.ts","store/reducers/city.reducer.ts","store/reducers/weather.reducer.ts","store/reducers/unit.reducer.ts","store/reducers/root.reducer.ts","services/CityService.ts","store/sagas/city.saga.ts","services/HttpWeatherService.ts","store/actions/weather.actions.ts","store/sagas/weather.saga.ts","store/sagas/root.saga.ts","store/RootStore.tsx","utils/getWeatherIcon.ts","components/CurrentConditionItem.tsx","screens/Favorites.tsx","components/search-cities/SearchCitiesInput.tsx","components/search-cities/CityListItem.tsx","components/search-cities/SearchCitiesList.tsx","components/search-cities/SearchCities.tsx","utils/dateFormat.ts","utils/unitConvert.ts","components/ForecastItem.tsx","utils/isFavorite.ts","store/actions/favorite.actions.ts","components/Forecasts.tsx","screens/Main.tsx","navigation/RootNavigation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["unitActions","unitToggled","unit","type","payload","connect","state","dispatch","useEffect","className","to","icon","faHome","faHeart","onClick","cityStoreActions","citySearchAsync","term","citySearchFinished","cities","citySetCurrent","city","API_KEY","BASE_API_URL","FAVORITES_LOCALSTORAGE","JSON","parse","localStorage","getItem","DEFAULT_CITY","Version","Key","Type","Rank","LocalizedName","Country","ID","AdministrativeArea","initialState","favorites","currentCity","rootReducer","combineReducers","action","weather","currentForecast","forecast","favorite","includes","setItem","stringify","newState","filter","CityService","a","axios","get","console","log","data","error","cityService","handleSearchCities","rootCitySaga","call","findCities","put","takeLatest","HttpWeatherService","locationKey","isMetric","responses","map","f","currentConditions","then","Response","Promise","all","httpWeatherService","weatherStoreActions","weatherFetchForecastAsync","weatherFetchForecastFinished","weatherFetchForecastByCityKeyAsync","cityKey","handleFetchForecast","handleFetchForecastByCityKey","rootWeatherSaga","fiveDayForecasts","rootSaga","sagas","saga","spawn","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","RootStore","props","children","getWeatherIcon","number","iconNumber","location","history","useHistory","push","WeatherText","alt","src","WeatherIcon","Temperature","Imperial","Value","Unit","Metric","Favorites","useState","setFavorites","favoritesCondition","i","SearchCitiesInput","isTyping","useRef","inputValue","setInputValue","faSearch","onChange","e","target","value","length","current","setTimeout","placeholder","CityListItem","onCitySelect","href","preventDefault","stopPropagation","display","setDisplay","ref","handleClickOutside","event","contains","document","addEventListener","removeEventListener","handleCitySelect","SearchCities","dateToDay","date","Date","getDay","fToC","fahrenheit","toFixed","Day","IconPhrase","Icon","max","Maximum","min","Minimum","renderTemperature","isFavorite","getState","some","c","favoriteStoreActions","favoriteCityAdded","favoriteCityRemoved","forecasts","setFavorite","faStar","Headline","Text","DailyForecasts","EpochDate","Main","keyQuery","URLSearchParams","useLocation","search","homeQuery","RootNavigation","exact","path","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.caeecc5e.chunk.js","sourcesContent":["import { StoreAction } from \"./StoreAction\";\r\n\r\nexport type unitActionType = \"UNIT_TOGGLED\";\r\n\r\nexport interface unitAction extends StoreAction<unitActionType> { }\r\n\r\nfunction unitToggled(unit: string): unitAction {\r\n    return {\r\n        type: \"UNIT_TOGGLED\",\r\n        payload: {\r\n            unit,\r\n        },\r\n    };\r\n}\r\n\r\n\r\nexport const unitActions = {\r\n  unitToggled,\r\n};\r\n","import { faHeart, faHome } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { unitActions } from \"../store/actions/unit.actions\";\r\nimport { RootState } from \"../store/reducers/root.reducer\";\r\n\r\ninterface Props {\r\n  unit: \"F\" | \"C\";\r\n  dispatch: any;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ unit, dispatch }) => {\r\n  useEffect(() => {\r\n  }, [unit]);\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"navbar\">\r\n        <div className=\"navbar-links\">\r\n          <Link to=\"/\">\r\n            <FontAwesomeIcon icon={faHome} /> Main\r\n          </Link>\r\n          <Link to=\"/favorites\">\r\n            <FontAwesomeIcon icon={faHeart} /> Favorites\r\n          </Link>\r\n          <div className=\"unit\">\r\n            <span>Temp. unit</span>\r\n            <button\r\n              className={unit === \"C\" ? \"selected\" : \"\"}\r\n              onClick={() => {\r\n                dispatch(unitActions.unitToggled(\"C\"));\r\n              }}\r\n            >\r\n              C\r\n            </button>\r\n            <button\r\n              className={unit === \"F\" ? \"selected\" : \"\"}\r\n              onClick={() => {\r\n                dispatch(unitActions.unitToggled(\"F\"));\r\n              }}\r\n            >\r\n              F\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateProps = (state: RootState) => {\r\n  return {\r\n    unit: state.unit.unit,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateProps)(Header);\r\n","import { City } from \"../../api/models/City\";\r\nimport { StoreAction } from \"./StoreAction\";\r\n\r\nexport type CityActionType = \"CITY_SEARCH_ASYNC\" | \"CITY_SEARCH_FINISHED\" | \"CITY_SET_CURRENT\";\r\n\r\nexport interface CityAction extends StoreAction<CityActionType> {}\r\n\r\nfunction citySearchAsync(term: string): CityAction {\r\n  return {\r\n    type: \"CITY_SEARCH_ASYNC\",\r\n    payload: {\r\n      term,\r\n    },\r\n  };\r\n}\r\n\r\nfunction citySearchFinished(cities: City[]): CityAction {\r\n  return {\r\n    type: \"CITY_SEARCH_FINISHED\",\r\n    payload: {\r\n      cities,\r\n    },\r\n  };\r\n}\r\n\r\nfunction citySetCurrent(city: City): CityAction{\r\n  return{\r\n    type:\"CITY_SET_CURRENT\",\r\n    payload:{\r\n      city\r\n    }\r\n  }\r\n}\r\n\r\nexport const cityStoreActions = {\r\n  citySearchAsync,\r\n  citySearchFinished,\r\n  citySetCurrent,\r\n};\r\n","// export const API_KEY = \"Pa7JZTED0ZLwQWUS6Z6qjztB6PWRqz0z\";\r\n// export const API_KEY = \"Fk9xGUzapojUPsvkosO8AGARxdSrcvpK\";\r\nexport const API_KEY = \"lFl4Kn6NNw0NGaPZkcmZmKiLDAAG4WqV\";\r\n\r\nexport const BASE_API_URL = \"http://dataservice.accuweather.com\";\r\nexport const FAVORITES_LOCALSTORAGE = JSON.parse(localStorage.getItem(\"favoriteCities\") || \"[]\")\r\nexport const DEFAULT_CITY = {\r\n  Version: 1,\r\n  Key: \"215854\",\r\n  Type: \"City\",\r\n  Rank: 31,\r\n  LocalizedName: \"Tel Aviv\",\r\n  Country: {\r\n    ID: \"IL\",\r\n    LocalizedName: \"Israel\",\r\n  },\r\n  AdministrativeArea: {\r\n    ID: \"TA\",\r\n    LocalizedName: \"Tel Aviv\",\r\n  },\r\n}\r\n","import { FAVORITES_LOCALSTORAGE } from \"../../consts\";\r\nimport { City } from \"./../../api/models/City\";\r\nimport { FavoriteAction } from \"./../actions/favorite.actions\";\r\n\r\nexport interface FavoriteState {\r\n  favorites: City[];\r\n}\r\n\r\nconst loadInitialState = () => {\r\n  const favorites = FAVORITES_LOCALSTORAGE;\r\n  return favorites && favorites;\r\n};\r\n\r\nconst initialState: FavoriteState = {\r\n  favorites: loadInitialState() || [],\r\n};\r\n\r\nexport function FavoriteReducer(\r\n  state = initialState,\r\n  action: FavoriteAction\r\n): FavoriteState {\r\n  switch (action.type) {\r\n    case \"FAVORITE_CITY_ADDED\":\r\n      if (!state.favorites.includes(action.payload.city)) {\r\n        localStorage.setItem(\r\n          \"favoriteCities\",\r\n          JSON.stringify([...state.favorites, action.payload.city])\r\n        );\r\n      }\r\n      return {\r\n        ...state.favorites,\r\n        favorites: [...state.favorites, action.payload.city],\r\n      };\r\n    case \"FAVORITE_CITY_REMOVED\":\r\n      const newState: City[] = state.favorites.filter(\r\n        (city) => city.Key !== action.payload.city.Key\r\n      );\r\n      localStorage.setItem(\"favoriteCities\", JSON.stringify(newState));\r\n      return { ...state, favorites: newState };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { DEFAULT_CITY } from './../../consts';\r\nimport { City } from \"../../api/models/City\";\r\nimport { CityAction } from \"../actions/city.actions\";\r\n\r\nexport interface CityState {\r\n  cities: City[];\r\n  currentCity: City | null;\r\n}\r\n\r\nconst initialState: CityState = {\r\n  cities: [],\r\n  currentCity: DEFAULT_CITY,\r\n};\r\n\r\nexport function CityReducer(\r\n  state = initialState,\r\n  action: CityAction\r\n): CityState {\r\n  switch (action.type) {\r\n    case \"CITY_SEARCH_FINISHED\":\r\n      return {\r\n        ...state,\r\n        cities: action.payload.cities,\r\n      };\r\n    case \"CITY_SET_CURRENT\":\r\n      return{\r\n        ...state,\r\n        currentCity: action.payload.city\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { Forecast } from \"../../api/models/DailyForecast\";\r\nimport { WeatherAction } from \"../actions/weather.actions\";\r\n\r\nexport interface WeatherState {\r\n  currentForecast?: Forecast ;\r\n}\r\n\r\nconst initialState: WeatherState = {\r\n};\r\n\r\nexport function WeatherReducer(\r\n  state = initialState,\r\n  action: WeatherAction\r\n): WeatherState {\r\n  switch (action.type) {\r\n    case \"WEATHER_FETCH_FORECAST_FINISHED\":\r\n      return {\r\n        ...state,\r\n        currentForecast: action.payload.forecast,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { unitAction } from './../actions/unit.actions';\r\n\r\nexport interface UnitState {\r\n    unit: \"F\" | \"C\";\r\n}\r\n\r\nconst initialState: UnitState = {\r\n  unit: \"F\",\r\n};\r\n\r\nexport function unitReducer(\r\n    state = initialState,\r\n    action: unitAction\r\n): UnitState {\r\n    switch (action.type) {\r\n        case \"UNIT_TOGGLED\":\r\n            return {\r\n                ...state,\r\n                unit: action.payload.unit\r\n            };\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { FavoriteReducer, FavoriteState } from \"./favorite.reducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nimport { CityReducer, CityState } from \"./city.reducer\";\r\nimport { WeatherReducer, WeatherState } from \"./weather.reducer\";\r\nimport { unitReducer, UnitState } from \"./unit.reducer\";\r\n\r\nexport interface RootState {\r\n  city: CityState;\r\n  weather: WeatherState;\r\n  favorite: FavoriteState;\r\n  unit: UnitState;\r\n\r\n}\r\n\r\nexport const rootReducer = combineReducers<RootState>({\r\n  city: CityReducer,\r\n  weather: WeatherReducer,\r\n  favorite: FavoriteReducer,\r\n  unit: unitReducer\r\n});\r\n","import axios from \"axios\";\r\nimport { City } from \"../api/models/City\";\r\nimport { API_KEY, BASE_API_URL } from \"../consts\";\r\n\r\ninterface AutocompleteResponse {\r\n  data: City[];\r\n}\r\n\r\nclass CityService {\r\n  async findCities(term: string): Promise<City[] | null> {\r\n    try {\r\n      const cities: AutocompleteResponse = await axios.get(\r\n        `${BASE_API_URL}/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${term}`\r\n      );\r\n      console.log(cities);\r\n      return cities.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nconst cityService = new CityService();\r\nexport default cityService;\r\n","import { put, takeLatest, call } from \"redux-saga/effects\";\r\nimport { City } from \"../../api/models/City\";\r\nimport cityService from \"../../services/CityService\";\r\nimport { CityAction, CityActionType, cityStoreActions } from \"../actions/city.actions\";\r\n\r\nexport function* handleSearchCities(action: CityAction): any {\r\n  const cities : City[] = yield call(cityService.findCities, action.payload.term);\r\n  yield put(cityStoreActions.citySearchFinished(cities));\r\n}\r\n\r\nexport default function* rootCitySaga() {\r\n  yield takeLatest<CityActionType>(\"CITY_SEARCH_ASYNC\", handleSearchCities);\r\n}\r\n","import axios from \"axios\";\r\nimport { Forecast } from \"../api/models/DailyForecast\";\r\nimport { API_KEY, BASE_API_URL, FAVORITES_LOCALSTORAGE } from \"./../consts\";\r\n\r\ninterface ForecastResponse {\r\n  data: Forecast;\r\n}\r\n\r\nclass HttpWeatherService {\r\n  async fiveDayForecasts(\r\n    locationKey: string,\r\n    isMetric?: boolean\r\n  ): Promise<Forecast | null> {\r\n    if (!isMetric || isMetric == null) {\r\n      isMetric = false;\r\n    }\r\n    try {\r\n      const forecast: ForecastResponse = await axios.get(\r\n        `${BASE_API_URL}/forecasts/v1/daily/5day/${locationKey}?apikey=${API_KEY}&metric=${isMetric}`\r\n      );\r\n      return forecast.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  currentConditions(locationKey: string) {\r\n    return axios.get(\r\n      `${BASE_API_URL}/currentconditions/v1/${locationKey}?apikey=${API_KEY}`\r\n    );\r\n  }\r\n\r\n  favoritesCondition() {\r\n    const responses = FAVORITES_LOCALSTORAGE.map((f: { Key: string }) =>\r\n      this.currentConditions(f.Key).then((Response) => Response.data)\r\n    );\r\n    return Promise.all(responses);\r\n  }\r\n}\r\n\r\nconst httpWeatherService = new HttpWeatherService();\r\nexport default httpWeatherService;\r\n","import { City } from \"../../api/models/City\";\r\nimport { Forecast } from \"../../api/models/DailyForecast\";\r\nimport { StoreAction } from \"./StoreAction\";\r\n\r\nexport type WeatherActionType =\r\n  | \"WEATHER_FETCH_FORECAST_ASYNC\"\r\n  | \"WEATHER_FETCH_FORECAST_FINISHED\"\r\n  | \"WEATHER_FETCH_FORECAST_BY_CITY_KEY\"\r\n  ;\r\n\r\nexport interface WeatherAction extends StoreAction<WeatherActionType> {}\r\n\r\nfunction weatherFetchForecastAsync(city: City): WeatherAction {\r\n  return {\r\n    type: \"WEATHER_FETCH_FORECAST_ASYNC\",\r\n    payload: {\r\n      city,\r\n    },\r\n  };\r\n}\r\n\r\nfunction weatherFetchForecastFinished(forecast: Forecast): WeatherAction {\r\n  return {\r\n    type: \"WEATHER_FETCH_FORECAST_FINISHED\",\r\n    payload: {\r\n      forecast,\r\n    },\r\n  };\r\n}\r\n\r\nfunction weatherFetchForecastByCityKeyAsync(cityKey: string): WeatherAction{\r\n  return{\r\n    type: \"WEATHER_FETCH_FORECAST_BY_CITY_KEY\",\r\n    payload:{\r\n      cityKey,\r\n    }\r\n  }\r\n}\r\n\r\nexport const weatherStoreActions = {\r\n  weatherFetchForecastAsync,\r\n  weatherFetchForecastFinished,\r\n  weatherFetchForecastByCityKeyAsync,\r\n};\r\n","import { put, takeLatest, call } from \"redux-saga/effects\";\r\nimport httpWeatherService from \"../../services/HttpWeatherService\";\r\nimport { cityStoreActions } from \"../actions/city.actions\";\r\nimport {\r\n  WeatherAction,\r\n  WeatherActionType,\r\n  weatherStoreActions,\r\n} from \"../actions/weather.actions\";\r\n\r\nexport function* handleFetchForecast(action: WeatherAction): any {\r\n  yield put(cityStoreActions.citySetCurrent(action.payload.city));\r\n  const forecast = yield call(\r\n    httpWeatherService.fiveDayForecasts,\r\n    action.payload.city.Key\r\n  );\r\n  yield put(weatherStoreActions.weatherFetchForecastFinished(forecast));\r\n}\r\n\r\nexport function* handleFetchForecastByCityKey(action: WeatherAction): any {\r\n  const forecast = yield call(\r\n    httpWeatherService.fiveDayForecasts,\r\n    action.payload.cityKey\r\n  );\r\n  yield put(weatherStoreActions.weatherFetchForecastFinished(forecast));\r\n}\r\n\r\nexport default function* rootWeatherSaga() {\r\n  yield takeLatest<WeatherActionType>(\r\n    \"WEATHER_FETCH_FORECAST_ASYNC\",\r\n    handleFetchForecast\r\n  );\r\n  yield takeLatest<WeatherActionType>(\r\n    \"WEATHER_FETCH_FORECAST_BY_CITY_KEY\",\r\n    handleFetchForecastByCityKey\r\n  );\r\n}\r\n","import { all, call, spawn } from \"redux-saga/effects\";\r\nimport rootCitySaga from \"./city.saga\";\r\nimport rootWeatherSaga from \"./weather.saga\";\r\n\r\nexport function* rootSaga() {\r\n  const sagas: any = [rootCitySaga, rootWeatherSaga];\r\n  yield all(\r\n    sagas.map((saga: any) =>\r\n      spawn(function* () {\r\n        while (true) {\r\n          try {\r\n            yield call(saga);\r\n            break;\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n        }\r\n      })\r\n    )\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport {\r\n  createStore,\r\n  applyMiddleware,\r\n  EmptyObject,\r\n  AnyAction,\r\n  Store,\r\n} from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { rootReducer, RootState } from \"./reducers/root.reducer\";\r\nimport { rootSaga } from \"./sagas/root.saga\";\r\n\r\nexport type RootStoreProps = Store<EmptyObject & RootState, AnyAction>;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nexport const store: RootStoreProps = createStore(\r\n  rootReducer,\r\n  applyMiddleware(sagaMiddleware)\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport const RootStore = (props: any) => {\r\n  return <Provider store={store}>{props.children}</Provider>;\r\n};\r\n","const getWeatherIcon = (number: number):string =>{\r\n    const iconNumber:string = number < 10 ? `0${number}` : `${number}`\r\n    return `https://developer.accuweather.com/sites/default/files/${iconNumber}-s.png`\r\n}\r\n\r\nexport default getWeatherIcon;\r\n\r\n\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { City } from \"../api/models/City\";\r\nimport { CurrentCondition } from \"../api/models/CurrentCondition\";\r\nimport { cityStoreActions } from \"../store/actions/city.actions\";\r\nimport { RootState } from \"../store/reducers/root.reducer\";\r\nimport { store } from \"../store/RootStore\";\r\nimport getWeatherIcon from \"../utils/getWeatherIcon\";\r\n\r\ninterface Props {\r\n  data: CurrentCondition[];\r\n  city: City;\r\n  unit: \"F\" | \"C\";\r\n}\r\n\r\nconst CurrentConditionItem: React.FC<Props> = ({ data, city, unit }) => {\r\n  const location = data[0];\r\n  let history = useHistory();\r\n\r\n  const onLocationClick = () =>{\r\n    store.dispatch(cityStoreActions.citySetCurrent(city))\r\n    history.push(`/?key=${city.Key}`)\r\n  }\r\n\r\n  return (\r\n    <div className=\"location-item\" onClick={onLocationClick}>\r\n      <h4 className=\"city-name\">{city.LocalizedName}</h4>\r\n      <p className=\"Weather-text\">{location.WeatherText}</p>\r\n      <img\r\n        alt={location.WeatherText}\r\n        src={getWeatherIcon(location.WeatherIcon)}\r\n      />\r\n\r\n      {unit === \"F\" && (\r\n        <p className=\"temp\">\r\n          {location.Temperature.Imperial.Value}\r\n          {location.Temperature.Imperial.Unit}°\r\n        </p>\r\n      )}\r\n      {unit === \"C\" && (\r\n        <p className=\"temp\">\r\n          {location.Temperature.Metric.Value}\r\n          {location.Temperature.Metric.Unit}°\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateProps = (state: RootState) => {\r\n  return {\r\n    unit: state.unit.unit,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateProps)(CurrentConditionItem);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport CurrentConditionItem from \"../components/CurrentConditionItem\";\r\nimport { FAVORITES_LOCALSTORAGE } from \"../consts\";\r\nimport httpWeatherService from \"../services/HttpWeatherService\"; \r\n\r\nconst Favorites: React.FC = () => {\r\n  const [favorites, setFavorites] = useState<any[]>();\r\n\r\n  useEffect(() => {\r\n    httpWeatherService\r\n      .favoritesCondition()\r\n      .then((responses) => setFavorites(responses));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"favorites\">\r\n      <h1>Favorites</h1>\r\n      <div className=\"favorite-cities\">\r\n        {favorites &&\r\n          favorites.map((city, i) => (\r\n            <CurrentConditionItem\r\n              key={i}\r\n              data={city}\r\n              city={FAVORITES_LOCALSTORAGE[i]}\r\n            />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Favorites;\r\n","import { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { ChangeEvent, useRef, useState } from \"react\";\r\nimport { cityStoreActions } from \"../../store/actions/city.actions\";\r\nimport { store } from \"../../store/RootStore\";\r\n\r\nconst SearchCitiesInput: React.FC = () => {\r\n  const isTyping = useRef<boolean>(false);\r\n\r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handleTextChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(e.target.value)\r\n    \r\n\r\n    if (inputValue.length < 2) {\r\n      store.dispatch(cityStoreActions.citySearchFinished([]));\r\n    } else if (!isTyping.current) {\r\n      isTyping.current = true;\r\n\r\n      if (inputValue && inputValue.length >= 2) {\r\n        store.dispatch(cityStoreActions.citySearchAsync(inputValue));\r\n      }\r\n\r\n      setTimeout(() => {\r\n        isTyping.current = false;\r\n      }, 150);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-unit\">\r\n      <FontAwesomeIcon className=\"search-icon\" icon={faSearch} />\r\n      <input\r\n        onChange={handleTextChange}\r\n        type=\"text\"\r\n        className=\"search-input\"\r\n        placeholder=\"Enter city name\"\r\n        value={inputValue}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchCitiesInput;\r\n","import React from \"react\";\r\nimport { City } from \"../../api/models/City\";\r\n\r\ninterface Props {\r\n  city: City;\r\n  onCitySelect: (city: City) => void;\r\n}\r\n\r\nexport const CityListItem: React.FC<Props> = ({ city, onCitySelect }) => {\r\n  const handleOnClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    onCitySelect(city);\r\n    \r\n  };\r\n\r\n  return (\r\n    <a\r\n      href=\" \"\r\n      onClick={handleOnClick}\r\n      className=\"city-found-name\"\r\n      key={city.LocalizedName}\r\n    >\r\n      {city.LocalizedName}\r\n    </a>\r\n  );\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RootState } from \"../../store/reducers/root.reducer\";\r\nimport { weatherStoreActions } from \"../../store/actions/weather.actions\";\r\nimport { City } from \"../../api/models/City\";\r\nimport { CityListItem } from \"./CityListItem\";\r\n\r\ninterface Props {\r\n  cities: City[];\r\n  dispatch: any;\r\n}\r\n\r\nconst SearchCitiesList: React.FC<Props> = ({ cities, dispatch }) => {\r\n  const [display, setDisplay] = useState(false);\r\n  const ref = useRef() as React.MutableRefObject<HTMLDivElement>;\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(event: any) {\r\n      if (ref.current && !ref.current.contains(event.target)) {\r\n        setDisplay(false);\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setDisplay(cities && cities.length > 0);\r\n  }, [cities]);\r\n\r\n  const handleCitySelect = (city:City): void=>{\r\n    dispatch(weatherStoreActions.weatherFetchForecastAsync(city))\r\n    setDisplay(false)  \r\n  }\r\n\r\n  \r\n  if (!display) return null;\r\n\r\n  return (\r\n    <div ref={ref} className=\"search-cities-list\">\r\n      {cities.map((city) => (\r\n        <CityListItem key={city.Key} city={city} onCitySelect={handleCitySelect} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateProps = (state: RootState) => {\r\n  return {\r\n    cities: state.city.cities,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateProps)(SearchCitiesList);\r\n","import React from \"react\";\r\nimport SearchCitiesInput from \"./SearchCitiesInput\";\r\nimport SearchCitiesList from \"./SearchCitiesList\";\r\n\r\nconst SearchCities: React.FC = () => {\r\n  return (\r\n    <div className=\"search-bar\">\r\n      <SearchCitiesInput />\r\n      <SearchCitiesList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchCities;\r\n","const dateToDay = (date: string):string => {\r\n    const day = new Date(date).getDay()\r\n    const days = [\r\n        'Sunday',\r\n        'Monday',\r\n        'Teusday',\r\n        'Wedensday',\r\n        'Thursday',\r\n        'Friday',\r\n        'Saturday']\r\n        return days[day]\r\n\r\n}\r\n\r\nexport default dateToDay;","export function cToF(celsius: number): number {\r\n  return +((celsius * 9) / 5 + 32).toFixed(1)\r\n}\r\n\r\nexport function fToC(fahrenheit: number): number {\r\n  return +(((fahrenheit - 32) * 5) / 9).toFixed(1)\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { DailyForecast } from \"../api/models/DailyForecast\";\r\nimport { RootState } from \"../store/reducers/root.reducer\";\r\nimport dateToDay from \"../utils/dateFormat\";\r\nimport getWeatherIcon from \"../utils/getWeatherIcon\";\r\nimport { fToC } from \"../utils/unitConvert\";\r\n\r\ninterface Props {\r\n  forecast: DailyForecast;\r\n  unit: \"F\" | \"C\";\r\n}\r\n\r\nconst ForecastItem: React.FC<Props> = ({ forecast, unit }) => {\r\n  const renderTemperature = () => {\r\n    const max =\r\n      unit === \"F\"\r\n        ? forecast.Temperature.Maximum.Value\r\n        : fToC(forecast.Temperature.Maximum.Value);\r\n\r\n    const min =\r\n      unit === \"F\"\r\n        ? forecast.Temperature.Minimum.Value\r\n        : fToC(forecast.Temperature.Minimum.Value);\r\n    return (\r\n      <p className=\"temp\">\r\n        {min} - {max} {unit}°\r\n      </p>\r\n    );\r\n  };\r\n\r\n  \r\n  \r\n  return (\r\n    <div className=\"forecast-item\">\r\n      <p className=\"day\">{dateToDay(forecast.Date)}</p>\r\n      <img\r\n        alt={forecast.Day.IconPhrase}\r\n        src={getWeatherIcon(forecast.Day.Icon)}\r\n      />\r\n      <label>{forecast.Day.IconPhrase}</label>\r\n      {renderTemperature()}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateProps = (state: RootState) => {\r\n  return {\r\n    unit: state.unit.unit,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateProps)(ForecastItem);\r\n","import { store } from '../store/RootStore';\r\nimport { City } from '../api/models/City';\r\n\r\nconst isFavorite = (city: (City | undefined | null)): boolean => {\r\n    return store.getState().favorite.favorites.some(c =>c.Key === city?.Key)\r\n    // let arrJson = localStorage.getItem(\"favoriteCities\")\r\n    // let arr = arrJson && JSON.parse(arrJson)\r\n    // if(arr){\r\n    //     return arr.includes(city)\r\n    // }\r\n    // return false\r\n    \r\n}\r\n\r\nexport default isFavorite;","import { City } from \"../../api/models/City\";\r\nimport { StoreAction } from \"./StoreAction\";\r\n\r\nexport type favoriteActionType = \"FAVORITE_CITY_ADDED\" | \"FAVORITE_CITY_REMOVED\";\r\n\r\nexport interface FavoriteAction extends StoreAction<favoriteActionType> { }\r\n\r\nfunction favoriteCityAdded(city: City | null): FavoriteAction {\r\n    return {\r\n        type: \"FAVORITE_CITY_ADDED\",\r\n        payload: {\r\n            city,\r\n        },\r\n    };\r\n}\r\nfunction favoriteCityRemoved(city: City | null): FavoriteAction {\r\n    return {\r\n        type: \"FAVORITE_CITY_REMOVED\",\r\n        payload: {\r\n            city,\r\n        },\r\n    };\r\n}\r\n\r\n\r\nexport const favoriteStoreActions = {\r\n    favoriteCityAdded,\r\n    favoriteCityRemoved\r\n\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { store } from \"../store/RootStore\";\r\nimport { RootState } from \"../store/reducers/root.reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ForecastItem from \"./ForecastItem\";\r\nimport { Forecast } from \"../api/models/DailyForecast\";\r\nimport { City } from \"../api/models/City\";\r\nimport isFavorite from \"../utils/isFavorite\";\r\nimport { favoriteStoreActions } from \"../store/actions/favorite.actions\";\r\n\r\ninterface Props {\r\n  forecasts: Forecast | undefined;\r\n  currentCity: City | null;\r\n}\r\n\r\nconst Forecasts: React.FC<Props> = ({ forecasts, currentCity }) => {\r\n  const [favorite, setFavorite] = useState(isFavorite(currentCity));\r\n\r\n  useEffect(() => {\r\n    setFavorite(isFavorite(currentCity));\r\n  }, [currentCity]);\r\n\r\n  const handleToggleFavorite = () => {\r\n    if (!favorite) {\r\n      setFavorite(true);\r\n      store.dispatch(favoriteStoreActions.favoriteCityAdded(currentCity));\r\n    } else {\r\n      setFavorite(false);\r\n      store.dispatch(favoriteStoreActions.favoriteCityRemoved(currentCity));\r\n    }\r\n  };\r\n\r\n \r\n\r\n  return (\r\n    <div className=\"forecasts \">\r\n      {currentCity && (\r\n        <div className=\"forecasts-top\">\r\n          <h2 className=\"city-name\">{currentCity?.LocalizedName}</h2>\r\n          <FontAwesomeIcon\r\n            className={favorite ? \"star-favorite\" : \"star\"}\r\n            icon={faStar}\r\n            onClick={handleToggleFavorite}\r\n          />\r\n        </div>\r\n      )}\r\n      <div className=\"forecasts-bottom\">\r\n        <h3 className=\"headline-text\">{forecasts?.Headline.Text}</h3>\r\n        <div className=\"fourcasts-cards\">\r\n          {forecasts &&\r\n            forecasts.DailyForecasts.map((forecast) => (\r\n              <ForecastItem key={forecast.EpochDate} forecast={forecast} />\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateProps = (state: RootState) => {\r\n  return {\r\n    forecasts: state.weather.currentForecast,\r\n    currentCity: state.city.currentCity,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateProps)(Forecasts);\r\n","import React, { useEffect } from \"react\";\r\nimport SearchCities from \"../components/search-cities/SearchCities\";\r\nimport Forecasts from \"../components/Forecasts\";\r\nimport { DEFAULT_CITY} from \"../consts\";\r\nimport { store } from \"../store/RootStore\";\r\nimport { weatherStoreActions } from \"../store/actions/weather.actions\";\r\nimport { useLocation } from \"react-router\";\r\n\r\n\r\nconst Main: React.FC = () => {\r\n\r\n  function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n  }\r\n\r\n  let query = useQuery();\r\n  const keyQuery = query.get(\"key\")\r\n\r\n  useEffect(() => {\r\n    let homeQuery = keyQuery ? keyQuery : DEFAULT_CITY.Key\r\n    store.dispatch(\r\n      weatherStoreActions.weatherFetchForecastByCityKeyAsync(homeQuery)\r\n    );\r\n  }, [keyQuery]);\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <SearchCities />\r\n      <Forecasts />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport Favorites from \"../screens/Favorites\";\r\nimport Main from \"../screens/Main\";\r\n\r\nconst RootNavigation: React.FC = () => {\r\n  return (\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Main />\r\n        </Route>\r\n\r\n        <Route exact path=\"/favorites\">\r\n          <Favorites />\r\n        </Route>\r\n      </Switch>\r\n  );\r\n};\r\n\r\nexport default RootNavigation;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport Header from \"./components/Header\";\r\nimport RootNavigation from \"./navigation/RootNavigation\";\r\nimport { RootStore } from \"./store/RootStore\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <RootStore>\r\n      <BrowserRouter>\r\n        <Header />\r\n        <RootNavigation />\r\n      </BrowserRouter>\r\n    </RootStore>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}